course_proto = Proto("lingi1341", "LINGI1341 Transmission Protocol")
function course_proto.dissector(buffer,pinfo,tree)
    pinfo.cols.protocol = "LINGI1341"
    local subtree = tree:add(course_proto,buffer(),
        "LINGI1341 Transmission Protocol Data")

    if (buffer:len() < 10) then
        subtree:add(buffer(0, buffer:len()), "Packet is too short (no header)!")
    else
        local ptype = buffer(0, 1):bitfield(0, 2)
        local header
        local ptype_text = "UNKNOWN"
        if (ptype == 1) then
            ptype_text = "PTYPE_DATA"
            header = subtree:add(buffer(0, 4), "Header")
        else
            header = subtree:add(buffer(0, 2), "Header")
            if (ptype == 2) then
                ptype_text = "PTYPE_ACK"
            elseif (ptype == 3) then
                ptype_text = "PTYPE_NACK"
            end
        end
        header:add(buffer(0, 1),"PTYPE: " .. ptype_text)
        local tr = buffer(0, 1):bitfield(2, 1)
        header:add(buffer(0, 1), "TR: " .. tr)
        header:add(buffer(0, 1),"Window: " .. buffer(0, 1):bitfield(3, 5))
        local after_len_idx = 1
        local len = 0
        if (ptype == 1) then
            len = buffer(1, 2):uint()
            header:add(buffer(1, 2), "Payload Length: " .. len)
            after_len_idx = 3
        end

        if (ptype == 1 and buffer:len() < 12) then
            subtree:add(buffer(0, buffer:len()), "Packet PTYPE_DATA is too short!")
        else
            header:add(buffer(after_len_idx, 1),"Sequence number: " .. buffer(after_len_idx, 1):uint())
            header:add(buffer(after_len_idx + 1, 4),"Timestamp: " .. buffer(after_len_idx + 1,4):uint())
            header:add(buffer(after_len_idx + 1 + 4, 4),"CRC1: " .. buffer(after_len_idx + 1 + 4,4):uint())

            if (buffer:len() ~= 10 and ptype ~= 1) then
                subtree:add(buffer(0, buffer:len()), "Packet is inconsistent!")
            elseif (buffer:len() > 528) then
                subtree:add(buffer(0, buffer:len()), "Packet is too long!")
            elseif (len > 0 and tr == 0 and buffer:len() ~= 12 + len + 4) then
                subtree:add(buffer(0, buffer:len()), "Packet length is inconsistent with the header length!")
            elseif (buffer:len() > 12) then
                subtree:add(buffer(12, len), "Payload [" .. len .. " bytes]")
                subtree:add(buffer(buffer:len()-4, 4),
                            "CRC2: " .. buffer(buffer:len()-4, 4):uint())
            end
        end
    end
end

udp_table = DissectorTable.get("udp.port")
udp_table:add(64341, course_proto)
udp_table:add(64342, course_proto)
